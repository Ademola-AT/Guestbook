// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/demo": &vfsgen۰DirInfo{
			name:    "demo",
			modTime: time.Time{},
		},
		"/demo/blob.bucket": &vfsgen۰DirInfo{
			name:    "blob.bucket",
			modTime: time.Time{},
		},
		"/demo/blob.bucket/demo_blob_bucket.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_blob_bucket.go",
			modTime:          time.Time{},
			uncompressedSize: 5233,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xff\x6f\xdb\xba\x11\xff\xd9\xfa\x2b\xae\x1a\xb6\xd9\x0f\x8e\xd4\xf5\xa7\x2d\xb3\x53\xe4\xeb\xab\xd1\xbc\xb8\x88\x9d\x16\xc5\x3a\xf4\xd1\xd2\xc9\xe2\x2c\x91\x2a\x49\x59\x11\x8a\xfc\xef\xc3\x1d\xe5\xc4\x4e\x9c\xb7\x14\xc3\xb0\x57\x34\x89\x25\xf2\x3e\x3c\x1e\x3f\xf7\xb9\xa3\xe3\x18\x4e\x75\xd5\x1a\xb9\xcc\x1d\xbc\x79\xfd\x97\xbf\xc1\x3c\x47\xf8\x59\xc3\x69\xa1\xeb\x14\x8e\x6b\x97\x6b\x63\x83\x38\x0e\xe2\x18\x2e\x65\x82\xca\x62\x0a\xb5\x4a\xd1\x80\xcb\x11\x8e\x2b\x91\xe4\xb8\x19\x19\xc2\x47\x34\x56\x6a\x05\x6f\xa2\xd7\xd0\xa7\x09\x61\x37\x14\x0e\xfe\x4e\x10\xad\xae\xa1\x14\x2d\x28\xed\xa0\xb6\x08\x2e\x97\x16\x32\x59\x20\xe0\x6d\x82\x95\x03\xa9\x20\xd1\x65\x55\x48\xa1\x12\x84\x46\xba\x9c\xd7\xe9\x50\x22\xc2\xf8\xdc\x61\xe8\x85\x13\x52\x81\x80\x44\x57\x2d\xe8\x6c\x7b\x22\x08\xd7\x39\x4d\xff\x72\xe7\x2a\x7b\x18\xc7\x4d\xd3\x44\x82\x3d\x8e\xb4\x59\xc6\x85\x9f\x6b\xe3\xcb\xc9\xe9\xf9\xd5\xec\xfc\xe0\x4d\xf4\xba\xb3\xba\x51\x05\x5a\x0b\x06\xbf\xd5\xd2\x60\x0a\x8b\x16\x44\x55\x15\x32\x11\x8b\x02\xa1\x10\x0d\x68\x03\x62\x69\x10\x53\x70\x9a\xbc\x6e\x8c\x74\x52\x2d\x87\x60\x75\xe6\x1a\x61\x90\x60\x52\x69\x9d\x91\x8b\xda\xed\x04\x6d\xe3\xa3\xb4\x3b\x13\xb4\x02\xa1\x20\x3c\x9e\xc1\x64\x16\xc2\xc9\xf1\x6c\x32\x1b\x12\xc8\xa7\xc9\xfc\xdd\xf4\x66\x0e\x9f\x8e\xaf\xaf\x8f\xaf\xe6\x93\xf3\x19\x4c\xaf\xe1\x74\x7a\x75\x36\x99\x4f\xa6\x57\x33\x98\x5e\xc0\xf1\xd5\x67\x78\x3f\xb9\x3a\x1b\x02\x4a\x97\xa3\x01\xbc\xad\x0c\xed\x40\x1b\x90\x14\x4e\x4c\x39\x76\x33\xc4\x1d\x17\x32\xed\x5d\xb2\x15\x26\x32\x93\x09\x14\x42\x2d\x6b\xb1\x44\x58\xea\x35\x1a\x25\xd5\x12\x2a\x34\xa5\xb4\x74\xac\x16\x84\x4a\x09\xa6\x90\xa5\x74\xc2\xf1\xab\x27\xfb\x8a\x82\xa0\x12\xc9\x8a\x40\x4a\x21\x55\x10\xc8\xb2\xd2\xc6\x41\x3f\xe8\x85\x89\x56\x0e\x6f\x5d\x18\xf4\xc2\xac\xe4\x3f\xb9\x2b\x8b\xd8\x61\x59\x15\xc2\x21\xbd\x90\x9a\x7e\x2b\x74\x31\x1d\x1b\x7d\xd6\x36\x0c\x82\x5e\xb8\xd4\x09\x91\x32\x4a\x71\x1d\x2f\x0a\xbd\x08\x83\xde\x57\x78\xf2\x36\x26\x36\xfd\xc6\x70\x89\xa5\x1f\x1d\x04\xb4\x93\xf9\xf4\x6c\xda\x37\x6b\xa1\x96\xa8\xdc\xe0\x10\xe6\xf7\x84\x94\x96\x18\x6a\x0e\xd6\xd2\xca\x45\x81\x43\x10\x69\x0a\xa5\x50\x2d\x11\xb4\x44\xe5\x2c\x05\xb9\x10\x92\x82\x44\x50\xb9\x6e\x40\x3a\x68\xb4\x59\xd9\x28\x08\xb2\x5a\x25\x20\x95\x74\xfd\x01\x7c\x0f\x7a\xb4\x99\xe8\x9d\x50\x69\x81\x17\xb5\x4a\xfa\x61\x9c\x62\xa9\xd9\xa7\x68\x51\x27\x2b\x74\x71\x38\x04\x7a\x3c\xe1\xa7\x13\x61\xd1\x4f\x37\x83\x17\x59\x17\xd2\xba\x1d\x84\x4b\x69\xdd\x0f\x21\xac\x25\x36\x3b\x08\x1f\x25\x36\x3f\x84\x40\x49\x80\x3b\x10\x9f\xe8\xcd\x3d\xc6\x5d\x10\xac\x85\x81\xda\x14\x40\xbc\x57\x4b\x7e\xf4\xc6\xf0\x13\x23\x79\xb3\xad\xf7\xe7\xc6\x6c\x26\x3f\x8e\xe9\x9e\xf3\xfb\xa4\xeb\x22\x05\xdb\xaa\x24\x9a\x92\x82\x2c\xe8\xbf\x73\xcc\x50\xa1\x3a\xdb\xb7\x30\x35\x60\x30\x31\x28\x1c\xe7\x03\x43\x6d\x2d\x4f\xb9\x88\x22\xc9\x59\x00\xd0\xba\xb7\xc1\xde\xc5\x4e\x2e\xa7\x27\x5f\x4f\x6e\x4e\xdf\x9f\xcf\xbf\xde\x5c\x5f\x82\xcd\x79\xf5\x05\x92\x20\xb0\xfd\x42\xea\x12\xff\x6c\x21\xd1\x2a\x93\x4b\xb0\x75\x92\x33\x92\xcb\x85\x23\xb2\x24\x42\xd1\x74\x83\x22\x85\x1c\x0d\x46\x41\x8f\x76\x8e\x86\x7f\xb4\x09\x7a\x14\xab\xc3\x31\x68\x1b\xfd\x8c\x0e\xd5\xba\x1f\x3e\x5a\x35\x1c\x04\x3d\x99\x71\x4c\xc7\x63\x08\x43\x0a\xcc\x3e\x67\x99\xd9\xd2\x82\x00\x87\xc6\x10\xa5\x21\xc5\x4c\xd4\x85\x1b\x82\xc1\x52\xaf\x11\x34\x45\x2c\xf4\x87\x48\x53\x89\xca\x52\x2d\xa3\xa0\xc7\x6e\x8c\x21\xa4\xcc\x38\x8c\xe3\xd8\x95\x94\x99\x77\x41\xcf\x9f\xd1\x90\x3d\x1e\xfb\x10\x4e\x2b\x54\x3e\x8c\xfd\x2e\xdd\xa3\x13\x91\xac\x96\x46\xd7\x2a\xed\x0f\x86\xe4\xaa\xf7\x99\x8c\x5e\x8d\x41\xc9\x82\x9d\x7e\x38\xef\x31\x64\xa5\x8b\x66\x95\x91\xca\x65\xfd\xf0\x42\xc8\xc2\x0b\xad\xae\x50\x6d\x1f\xd4\x21\xfc\x71\x1d\xf2\xea\x03\x72\xe7\xee\xf9\x9c\x96\x16\x2a\x83\xce\xb5\x60\x44\x03\xef\xe6\xbf\x5c\x46\x30\xf3\xe7\xd5\x20\xe4\x62\x8d\x5c\x49\xca\x52\x2b\xb0\xae\x2d\x10\x6c\x8e\xe8\x62\x74\x49\xc4\x32\x49\x64\xb7\x6f\x79\x81\x89\xaa\x6a\x77\x08\x7d\x4f\xcb\xc1\x0e\x73\x6e\xae\x2f\xa3\x20\xd1\xca\xba\x47\xc9\x3c\xef\x34\x0e\xc6\xf0\x6b\x30\x7a\x75\x36\x3d\x9d\x7f\xfe\x70\x0e\xa4\x7f\x47\xc1\x68\xf3\x07\x45\x7a\x14\x00\x8c\x4a\x74\x02\x92\x5c\x18\x8b\x6e\x1c\xde\xcc\x2f\x0e\xfe\x1a\xf2\x80\x93\xae\xc0\xa3\xed\x15\xc9\xb1\x51\xec\xdf\x07\xa3\xd8\x43\x8c\x16\x3a\x6d\xd9\xa0\xa2\xdf\xe0\x83\x50\x91\x28\xd3\x7c\x65\x9d\x11\x0e\x2d\xeb\x36\x15\x62\x9d\x81\xe0\xba\x7f\xf6\x7e\x7b\x3b\x11\x21\xc4\xd5\x36\xd0\xc4\x51\x2c\x93\xda\x18\x54\xae\x68\xa1\xb6\x54\x24\xc4\x4e\x10\x16\xc2\xfa\x82\x46\xf0\x94\x19\xe1\xf7\xef\x10\xc1\xdd\x5d\x38\x84\x26\x97\x49\xce\x48\x1d\xf9\x7d\x6e\xd4\x54\x66\xd7\x52\xb0\x09\xaa\xb5\x34\x5a\x91\xca\xc2\x5a\x18\xc9\x55\xf7\x09\xf1\xf7\x38\x47\xf5\x6d\x24\x20\x37\x98\x8d\xc3\x4d\xd9\x5f\xea\x54\x27\x5c\xf1\xb7\xaa\xc1\x1f\xf2\xd4\x1c\xdc\x5c\x5f\xda\xf0\x88\x12\x6f\x14\x8b\x23\x3e\xe6\x52\x1b\x64\x28\xa9\x32\x6d\x4a\x2e\x72\x20\x16\xba\xe6\xa3\xb5\x94\xd9\x5d\x98\x8e\x3f\x4c\xec\xb6\x0b\x75\xe1\x7d\x18\x15\xf2\xe8\xde\x87\xc8\xeb\xf2\x11\x89\x31\xaf\x41\xdb\xe3\xb4\xa0\x02\xd2\x35\x2d\x9e\xf8\xa3\xb8\x90\x7b\x11\x58\x97\x8f\x48\x8c\xf7\x22\x88\x87\xea\x4d\x67\x40\x1e\xbe\x00\xd4\x67\xf9\x11\xeb\x33\xc3\x0a\x50\xd8\x6c\x10\x9c\xde\x83\x31\x8a\x69\x8b\xa3\xd8\x53\x6b\x14\x7b\xce\xfe\xda\xc9\xf2\xde\xd2\xd5\x6f\xb8\xf9\x8a\xae\xd1\x56\x5a\x59\xe4\xe5\x0c\x09\xce\x37\xf8\xa9\x1b\x61\x85\x65\x3d\x77\x65\xc5\x62\xb7\x69\x07\xa2\x5f\x6a\xeb\xfa\xf7\x4f\x57\xd8\xf4\x43\xa2\x56\x38\x88\x3e\x50\x66\xf4\xf7\x67\xd8\x60\x10\xf4\x48\x5a\x08\xa9\xac\x8a\xe8\xfc\x16\x93\xda\x61\xbf\x79\x5e\x7a\xd8\x95\x73\x52\x5c\x9a\x85\xc6\x74\x0f\x83\xa1\xf7\x7f\xe6\x84\xab\xed\x44\x39\x34\x4a\x14\x33\x34\x6b\x34\x3c\x63\x4b\x76\x3a\x55\xf8\xc7\x3f\x7d\x21\xa3\x13\x9f\x2e\xfe\x85\x89\x7b\xaa\x07\x34\xf6\x7f\xd2\x83\xef\xdf\x0d\x09\x23\x44\x77\x77\x9e\x16\xa9\x5c\x7b\x82\xd0\x98\xcc\x20\x9a\xd8\x33\x69\xba\x51\x9e\xb1\x21\xcd\x43\xbd\x67\x52\xbf\xad\x0c\x66\xf2\x76\x4c\xa9\xfd\x1e\x5b\xca\xee\xa3\x87\xcf\xc4\xa9\x7b\x58\x2c\x2c\xfe\x07\x44\x22\xf9\xdb\x15\xb6\x2f\x82\x53\xe9\xc6\xfb\xb8\x73\x7f\x67\x0d\xde\x93\xd2\x1c\x70\xce\xd8\x0d\x8f\x1f\x26\x33\xc2\x1e\x2a\x77\x7d\xc0\x93\x0e\x0a\x68\xc7\x5e\x2e\xa5\xc3\x92\x51\x05\x6c\xaa\x5f\xa5\x2d\x35\x89\x6d\xd7\x0c\x0b\x08\x7d\x6c\x42\xc2\xfb\x56\xa3\x69\xa1\x12\x46\x94\xe8\xd0\x44\x70\x4e\x9d\x01\xe1\x61\x0a\xa9\x34\x98\x38\x6d\x5a\x5f\x9a\x0b\xa9\x56\x54\xe7\x68\xd4\x37\x09\xf7\x13\xf8\x2e\x20\x54\xea\x1b\x0b\xa5\xd5\xc1\x33\xb6\x14\x49\x6f\x4b\xd5\x3a\x7a\x9c\x9d\x5b\x9b\xfa\xb1\xec\x94\xd9\x56\x47\xf6\xea\xbe\xd5\xd8\x4d\x9d\xfb\x19\x2f\x48\x9c\x9e\x41\x57\x1b\xc5\x7d\x84\xae\x9c\xa5\x84\xfd\xd3\x43\xee\x54\x7c\xbf\xa0\x25\xce\x90\x2f\x1c\x68\x0e\x21\x8c\xc3\x61\xd0\xeb\x7d\xe0\xf0\x1e\xd2\x61\x1b\xfc\x16\x5d\x68\x53\x7e\x14\x45\x8d\xfd\x4d\xe0\x07\x43\x86\x25\x23\x82\xf5\x6e\x31\x6e\x9f\x96\x1a\x04\xbd\xc4\xdd\xd2\x08\x99\x9f\xfa\x36\xa5\x3f\xf0\xdd\x97\x3f\xe0\xa7\x79\x1c\xf4\xa8\x40\x90\x43\x34\xc3\xf7\x3c\x87\x63\x9a\x6e\xa2\x2b\xb2\x4f\xdc\x2d\x6d\xab\x93\x97\xf1\x18\xa4\x8e\xce\xa7\x17\x6c\xd2\x5b\x18\x14\xab\xa0\x47\x5e\xed\x11\xa0\x47\x61\x7c\xa6\xfd\xa1\xa5\xb8\x65\xd5\xa0\xf0\xd6\xed\xd4\xdc\x15\xb6\x5b\xdd\xd0\x4b\xc2\x7f\x1f\x7f\xef\x13\xef\x7a\x4c\xf7\x5c\x54\x69\x9f\x1f\x87\x1c\x0b\xd6\xb8\x97\xa9\x33\x17\xbb\xa7\xea\xbc\xad\x77\xbf\xa1\xce\xbc\xe6\xff\x46\x9f\x1f\x25\xc1\xd6\xcd\xe6\x77\x94\x04\xfb\xae\x18\xed\x76\x97\xde\xa9\x0b\x35\x26\xfe\xbb\x91\x15\xb6\xa0\x44\x89\x90\x1a\x5d\x1d\xa4\xba\xa1\x2b\x8e\x75\x74\x9d\xd0\x19\x03\xf2\x35\x82\x3a\x34\x5d\xbb\x28\xe8\x91\x41\xc7\xfa\xad\xa4\x59\x61\xdb\x5d\x23\x68\x7c\xfc\xcc\xb6\xc2\x2f\x34\xf1\x4b\xe8\xe5\xe6\xfe\xbb\x91\x07\x65\x0b\x77\xf6\x7b\x22\xd2\x4d\xe4\x76\xb6\xf9\x5c\xea\xd1\x25\x88\x02\xdf\x91\xa3\x4b\xd9\x2b\x6c\xae\x79\x80\xb2\x6b\x48\xfe\x0d\x89\x15\x2f\x60\xc9\x33\x39\xd4\xdd\xfa\x3c\x28\x65\xcc\x17\xb5\x2f\x67\xae\xb4\xbb\xa0\x0b\xcb\xa3\x23\x4a\x31\x43\x03\xde\xd5\xe8\xb4\xd0\x16\xc9\x75\xa9\xa3\x53\x5d\xb5\xb4\xaa\x1f\x1a\xec\xe1\xdc\xf6\x55\xf8\xc7\x48\xf7\x5f\xf0\x82\x0a\x06\xf7\x74\x9b\x8e\x31\x62\xb8\x4f\x39\xfa\x2e\x91\x4d\xa4\x85\x0f\xd3\xd9\x1c\xd3\x21\x7f\x8d\xe5\xbf\x22\xda\xb1\x82\xae\x21\x5c\x61\x1b\x05\x8f\x69\x71\xaa\x4b\x22\x98\xd5\x5a\xbd\x0a\x1f\x07\x71\x52\x56\x05\x52\x23\x8f\x29\x05\xe5\xdf\x01\x00\x00\xff\xff\x53\x2f\xe7\xbc\x71\x14\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo"].(os.FileInfo),
	}
	fs["/demo"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket"].(os.FileInfo),
	}
	fs["/demo/blob.bucket"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket/demo_blob_bucket.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
