// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/demo": &vfsgen۰DirInfo{
			name:    "demo",
			modTime: time.Time{},
		},
		"/demo/blob.bucket": &vfsgen۰DirInfo{
			name:    "blob.bucket",
			modTime: time.Time{},
		},
		"/demo/blob.bucket/demo_blob_bucket.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_blob_bucket.go",
			modTime:          time.Time{},
			uncompressedSize: 4722,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x7f\x6f\xe3\xb8\x11\xfd\xdb\xfa\x14\xb3\x02\xda\xca\x07\x47\xfa\xb7\x48\x6d\x07\x8d\x93\xdc\x05\x9b\x5b\x07\x1b\xef\x2d\x8a\x6e\xb1\x47\x4b\x23\x8b\xb5\x44\x6a\xc9\x91\x1d\x23\xc8\x77\x2f\x86\x94\x6d\xd9\x71\x16\x59\x14\x45\x0f\x48\x6c\x4b\x24\xdf\xfc\xe0\xbc\xc7\x61\x2d\xd2\xa5\x58\x20\x54\x42\xaa\x20\x90\x55\xad\x0d\x41\x14\xf4\xc2\x54\x2b\xc2\x47\x0a\x83\x5e\x98\x57\xee\xab\xa0\xaa\x4c\x08\xab\xba\x14\x84\xfc\x42\x6a\xfe\x54\x48\x49\x41\x54\xf3\x6f\x6d\xc3\x20\xe8\x85\x0b\x9d\x96\xba\xc9\xe2\x0c\x57\xc9\xbc\xd4\xf3\x30\xe8\x7d\x85\x17\x6f\x93\x5c\x96\xf8\x9d\xe1\x0a\x2b\x3f\xda\x0f\x82\x24\x81\xd9\xf4\x6a\x1a\x99\x95\x50\x0b\x54\xd4\x3f\x87\x59\x21\x2d\x30\x04\x48\x0b\x8d\x45\x73\xb6\x92\x56\xce\x4b\x1c\x80\xc8\x32\xa8\x84\xda\x40\xaa\xab\x0a\x15\x59\xc0\xc7\xba\x14\x52\x49\xb5\x60\xa8\x42\xaf\x41\x12\xac\xb5\x59\xda\x38\x08\xf2\x46\xa5\x20\x95\xa4\xa8\x0f\x4f\x41\x8f\x83\x89\x7f\x11\x2a\x2b\xf1\xa6\x51\x69\x14\x26\x19\x56\xda\xf9\x14\xcf\x9b\x74\x89\x94\x84\x03\xe0\xc7\x4b\xf7\x74\x29\x2c\xfa\xe9\xa6\xff\xa6\xd5\xa5\xb4\x74\x80\x70\x27\x2d\xfd\x10\xc2\x4a\xe2\xfa\x00\xe1\x37\x89\xeb\x1f\x42\x58\x1b\x49\x78\x00\xf1\x99\xdf\xec\x30\x9e\x83\x60\x25\x0c\xf8\xd9\x9f\x3e\xde\x81\x25\xc3\xd9\xdb\xbf\x84\x9f\x1c\x9e\x5f\xdc\x79\x7f\x6d\xcc\x76\xf2\x71\x66\x4f\xec\xe2\x67\xdd\x94\x19\xd8\x8d\x4a\xe3\xa9\x4a\x11\xe6\xfc\x47\x84\x06\xa8\x10\xaa\x5d\x7b\x01\x53\x03\x06\x53\x83\x82\x10\xa8\x40\x07\xd5\x31\x0f\x5a\x01\x8a\xb4\x00\x83\xdf\x1a\xb4\x74\x11\x9c\x34\x76\x79\x37\xbd\xfc\x7a\xf9\x69\xf2\xfe\x7a\xf6\xd5\xc5\x54\x38\xeb\x73\x04\xd9\xae\x9f\x4b\x5d\xe1\x5f\x2c\xa4\x5a\xe5\x72\x01\xb6\x49\x0b\x87\x44\x85\x20\x2e\x99\x54\x28\x9e\x6e\x50\x64\x50\xa0\xc1\x38\xe8\x71\xe4\x68\xdc\xbf\x36\x41\x6f\x9f\xb1\x11\x68\x1b\xff\x8c\x84\x6a\x15\x85\x47\xa6\xc3\x7e\xd0\x93\x79\x27\xbd\xa3\x11\x84\x21\xe7\xe8\x94\xdf\xae\xd4\xa5\x05\x01\x84\xc6\x70\x8d\x43\x86\xb9\x68\x4a\x1a\x80\xc1\x4a\xaf\x10\x34\x27\x2f\xf4\xbb\xca\x53\xb9\xb6\xa5\x5a\xc4\x41\xef\xc0\xa3\x90\x09\x73\x9e\x24\x09\x55\x4c\xd8\xe7\xad\xbf\x03\x17\xc2\xc8\xe7\x74\x5a\xa3\xf2\x79\x8d\x5a\x15\x88\x2f\x45\xba\x5c\x18\xdd\xa8\x2c\xea\x0f\xf6\x6e\xfb\x28\x78\xe9\xbb\x11\x28\x59\xba\x00\xf6\x65\x30\x82\xbc\xa2\xf8\xa1\x36\x52\x51\x1e\x85\x37\x42\x96\x98\x01\x69\xd0\x35\xaa\xee\xfe\x9d\xc3\x9f\x56\xa1\xf3\xa1\xcf\x4e\x3d\xbf\x4e\x78\x69\xa1\x36\x48\xb4\x01\x23\xd6\xf0\xcb\xec\xd7\xbb\x18\x1e\xfc\x36\xae\x11\x0a\xb1\x42\x10\x8e\xf6\x5a\x81\xa5\x4d\x89\x60\x0b\x44\x4a\x90\xd2\x18\x72\x6d\x80\x99\x60\x2f\x9c\x81\x5b\x55\x37\x74\x0e\x91\xaf\xd6\xfe\x41\x41\x7d\xfa\x78\x17\x07\xa9\x56\x96\x8e\x98\x3e\x6b\x05\x10\x46\xf0\x7b\x30\x7c\x77\x35\x9d\xcc\xfe\x71\x7f\x0d\x2c\x8e\xe3\x60\xb8\xfd\x42\x91\x8d\x03\x80\x61\x85\x24\x20\x2d\x84\xb1\x48\xa3\xf0\xd3\xec\xe6\xec\xaf\xa1\x1b\x20\x49\x25\x8e\xbb\x16\xd9\xb1\x61\xe2\xdf\x07\xc3\xc4\x43\x0c\xe7\x3a\xdb\xb8\x05\x35\x7f\x82\x4f\x42\xcd\x8a\xcd\xf3\x95\x25\x23\x08\x2d\x73\x82\x35\x10\x74\x0e\x02\x7e\xd6\x30\xb9\x7a\xdf\x0d\x27\x66\x84\xa4\xee\x02\xdd\x12\xe7\x32\x6d\x8c\x41\x45\xe5\x06\x1a\x2b\xd5\x02\xc4\x41\x12\xe6\xc2\x62\xc6\xdc\x62\x78\x2e\xa0\xf0\xe9\x09\x62\x78\x7e\x0e\x07\xb0\x2e\x64\x5a\x38\xa4\x96\x13\x9e\x32\x8d\xc1\x0c\x56\x52\xb8\x25\xa8\x56\xd2\x68\xc5\x12\x0c\x2b\x61\xa4\xe0\xca\x7d\x41\x85\x13\xce\x3d\x20\xc2\x50\x40\x61\x30\x1f\x85\xac\x66\xf6\x3c\x49\xba\x07\x44\xca\xf5\x5e\x93\x4d\x1a\x53\xda\x24\x1c\x33\x17\x87\x89\x18\xbb\x2d\xae\xb4\x41\x07\x23\x55\xae\x4d\x25\x48\x6a\x05\x62\xae\x1b\xb7\xad\x96\xc9\xde\xa6\xe8\xef\xf7\xb7\xb6\x6b\xbe\x29\xbd\xfd\x61\x29\xc7\x3b\xfb\xb1\x17\xec\x31\xab\xb4\xb3\xc1\xa1\x39\x62\xf0\xc9\xa2\x73\xf7\xec\x8b\x7e\x98\x94\xf2\x24\x82\x13\xec\x31\xab\xf4\x49\x04\x01\xb6\xc6\x54\xe6\x32\x75\xf9\x67\x0f\xdf\x00\xea\xd9\x3e\x76\xc2\xed\x60\x05\x28\x5c\x6f\x11\x48\x9f\xc0\x18\x26\x1c\xe2\x30\xf1\x65\x35\x4c\x7c\xbd\xfe\xde\x2a\xf5\xc9\x33\x2d\x5a\x83\x3b\x4f\x3e\xa2\xad\xb5\xb2\xe8\xcc\x19\x16\x9e\x6f\xf0\x53\x3b\xe2\x44\xd7\x49\x3c\x55\x75\x09\xe7\x23\xd8\xf6\x09\xf1\xaf\x8d\xa5\x68\xf7\xf4\x01\xd7\x51\xc8\x65\x15\xf6\xe3\x7b\x66\x45\x74\x9a\x5d\xfd\xbd\xb2\x30\x58\x55\x97\xf1\xf5\x23\xa6\x0d\x61\xb4\xee\xea\xcf\xdf\x8e\xc5\xc7\x39\x74\xcd\x52\xcc\x13\xd1\x98\xf6\xa1\x3f\xf0\x51\x3c\x90\xa0\xc6\xde\x2a\x42\xa3\x44\xf9\x80\x66\x85\xc6\xcd\xe8\x08\x4f\xab\x0b\xff\xfc\x97\x3f\xe1\x78\xdf\xa7\xf3\x7f\x63\x4a\x2f\x15\x81\xc7\xfe\x4f\x8a\xf0\xf4\x64\x58\x1a\x21\x7e\x7e\xf6\xc5\x91\xc9\x95\x2f\x13\x1e\x93\x39\xc4\xb7\xf6\x4a\x9a\x76\xd4\xcd\x38\xac\xe8\x8b\xda\x60\x2e\x1f\x47\xcc\xe9\xf7\xb8\x61\x5a\x8f\xf7\xbf\xb9\xa0\x76\x68\x58\x5a\x3c\x0d\xc4\x85\x7d\xb1\xc4\xcd\x9b\x50\x54\xb6\xf5\x35\x69\x9d\x3d\x80\x76\x11\x28\xed\xd2\xeb\x58\xba\xad\xdd\xfd\x64\x87\x70\xa2\x7c\xdb\x76\xe0\x45\x3b\x05\x1c\xa8\x97\x47\x49\x58\x39\x54\x01\xdb\x33\xaf\xd6\x96\x3b\xc6\x0d\x34\x2a\x43\x03\x02\x42\x9f\x92\x90\xf1\xbe\x35\x68\x36\x50\x0b\x23\x2a\x24\x34\x31\x5c\x73\x83\xc0\x78\x98\x41\x26\x0d\xa6\xa4\xcd\xc6\x1f\xcb\xa5\x54\x4b\x3e\xd7\x78\xd4\xf7\x0a\xbb\x09\x03\xc6\x12\x2a\xf3\xfd\x85\xd2\xea\xec\x95\xb5\x9c\x49\xbf\x96\xcf\xe8\xf8\x98\x91\x9d\xa0\x7e\x8c\x91\xbb\x36\xe3\xda\x33\xa5\x6d\x33\x0e\x89\xb2\x9b\xf1\x06\x9a\xf4\x0c\x52\x63\x94\xeb\x1e\x74\x4d\x96\x19\xfa\xe7\x3d\x53\x6a\x96\x5b\xcb\x26\xae\xb0\x94\x15\xbb\x76\x0e\x61\x12\x0e\x82\x5e\xef\xde\xa5\xf7\x9c\x37\xdb\xe0\xb7\xf8\x46\x9b\xea\x37\x51\x36\x18\x6d\x13\xdf\x1f\x38\x58\x5e\xc4\xb0\xde\x2d\x87\x1b\xb1\xa9\x7e\xd0\x4b\xe9\x91\x47\x78\xf9\xc4\x37\x27\x51\xdf\x37\x61\x7e\x83\x5f\xb2\x36\xe8\xf1\xa1\xc0\x0e\xf1\x8c\xc1\x56\x54\xd8\x46\xfc\x81\xd7\xa7\xf4\xc8\x61\xb5\x7a\x33\x1a\x81\xd4\xf1\xf5\xf4\xc6\x2d\xe9\xcd\x0d\x8a\x65\xd0\x63\xaf\x4e\xf4\x3a\x47\x69\x7c\xa5\xdd\x61\x53\xae\x73\xd5\xa0\xf0\x91\x0e\xce\xd8\x25\x6e\x3a\xdd\xcf\x5b\xd2\xbf\xcb\xbf\xf7\xc9\x45\x3d\x02\x51\xd7\xa8\xb2\xc8\x3d\x0e\x5c\x2e\x9c\xa2\xbd\x4d\x91\xdd\x01\xf7\x52\x91\xbb\xea\xf6\x7d\x45\x76\x66\xff\x07\x6a\x7c\x44\x82\xce\x35\xe7\x0f\x44\x82\x53\x37\x8d\x4d\xb7\x43\x6f\xd5\x85\x9b\x11\x58\x4b\x2a\x78\xd3\x41\x89\x0a\x21\x33\xba\x3e\xcb\xf4\x9a\x6f\x3a\x96\xf8\x56\xa1\x73\x07\xe8\x6e\x13\xdc\x91\xe9\x86\xe2\xa0\xc7\x0b\xda\xaa\xef\x90\x66\x89\x9b\xf6\x22\xc1\xe3\xa3\x57\xc2\x0a\xbf\xf0\xc4\x2f\xa1\x97\x1b\xbe\x21\x49\x6e\xd2\xf6\xca\x16\x1e\xc4\x7b\x29\xb2\x6d\xe6\x0e\xc2\x7c\x8d\x7a\x7c\x17\xe2\xc4\xb7\x95\xd1\x52\xf6\x03\xae\x3f\xba\x01\x66\xd7\x80\xfd\x1b\x70\x55\x9c\xbc\x30\xbc\x89\x43\xed\xe5\xcf\x83\x32\x63\xbe\xa8\x53\x9c\xf9\xa0\xe9\x86\xaf\x29\x47\x5b\x94\x61\x8e\x06\xbc\xab\xf1\xa4\xd4\x16\xd9\x75\xa9\xe3\x89\xae\x37\x6c\xd5\x0f\xf5\x4f\x6e\xe6\x44\x2b\x2b\x79\x0b\x2d\x12\xf1\x9e\x4c\x7c\xeb\x76\x36\xdb\xd4\x38\xd8\x3d\xdd\xa1\x5a\x50\x01\x85\x43\xb2\xf1\x89\xf2\xed\x5e\xb1\x7f\xac\x7e\xff\x8b\x12\xe3\xb3\xc7\xb5\x84\xdb\x86\x33\x76\x70\x9f\x0b\xf4\x4d\xa6\x5b\x22\x2d\xdc\x4f\x1f\x66\x98\x0d\xc0\x75\x95\xbe\x75\xec\xae\x82\xb6\x9f\x5c\xe2\x26\x0e\x8e\x2b\x6c\xa2\x2b\xce\x8b\xd5\x5a\xbd\x0b\x8f\xf7\xe3\xb6\xaa\x4b\xe4\x3b\x00\x66\xfd\xe0\x39\xf8\x4f\x00\x00\x00\xff\xff\xcc\xfe\x23\xfb\x72\x12\x00\x00"),
		},
		"/demo/runtimevar.variable": &vfsgen۰DirInfo{
			name:    "runtimevar.variable",
			modTime: time.Time{},
		},
		"/demo/runtimevar.variable/demo_runtimevar_variable.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_runtimevar_variable.go",
			modTime:          time.Time{},
			uncompressedSize: 2248,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x95\x0f\x85\x54\xb8\xd2\x1e\x36\x60\xf0\x24\x0f\x69\xe3\x76\xc6\xd2\xa6\x70\x9c\x0c\x7b\x6a\x19\xe9\x6c\x11\x95\x48\xf5\x78\x92\x1b\x04\xfe\xef\x03\x25\xcb\x91\x5b\x07\xd3\x83\x2d\x91\x77\xdf\x7d\x77\xbc\xfb\x58\xab\xec\xab\xda\x22\x54\x4a\x1b\x21\x74\x55\x5b\x62\x08\xc4\x44\x66\xd6\x30\x7e\x67\x29\x26\xb2\xe0\xaa\x8c\x19\xab\xba\x54\x8c\x7e\xc1\x20\xc7\x05\x73\xed\xdf\xad\x93\x42\x4c\xe4\xd6\x66\xa5\x6d\xf2\x28\xc7\x36\xa6\xc6\xb0\xae\xb0\x55\x24\xc5\xe4\x33\x3c\xb3\x17\x67\xd6\x38\x56\x86\xff\xcf\x6e\xa3\xcb\x1e\x2b\x14\x22\x8e\x61\x7d\x7d\x79\x1d\x50\xab\xcc\x16\x0d\x87\x33\x58\x17\xda\x81\xb7\x01\xed\xa0\x71\x48\xaf\x5b\xed\xf4\x7d\x89\x53\x50\x79\x0e\x95\x32\x0f\x90\xd9\xaa\x42\xc3\x0e\xf0\x7b\x5d\x2a\x6d\xb4\xd9\x7a\xa8\xc2\xee\x40\x33\xec\x2c\x7d\x75\x91\x10\x9b\xc6\x64\xa0\x8d\xe6\x20\x84\x47\x31\xf1\x19\x46\x7f\x29\x93\x97\xf8\xae\x31\x59\x20\xe3\x1c\x2b\x3b\x62\x16\xb5\x8a\xb4\xba\x2f\x31\x96\x53\x78\x5a\xbe\x3b\xac\xf6\xae\x14\x8a\xbd\x10\xad\x22\x18\xac\x6f\x57\x57\xe0\x98\x3c\x87\xf1\x32\xbc\x1a\x21\x0f\x18\x27\x16\x0b\x22\x40\x22\x4b\x3f\x51\x1d\x43\xa7\x60\x5d\xf4\x1e\x19\x4d\x1b\xc8\xd5\xed\xc7\xf5\xf2\xc3\xe2\xee\x62\xf5\xf9\xee\x62\xb5\xbc\x78\x73\xb5\xf8\x7c\xbb\xba\x92\xa1\x98\xe8\xcd\x09\xa3\x34\x05\x29\x3d\xd6\x0f\x60\x72\x38\xa6\x59\x1c\xff\xd9\xaa\x32\xad\x1e\x5e\x0f\x16\x2f\x73\xcc\x6c\x8e\x94\xf6\xe9\x48\x31\xd9\x3f\x71\x99\x9e\xf0\x4e\x47\x05\x8a\xae\x6b\x34\x43\x86\xc1\xa1\xd1\xa2\x37\x2a\xfb\xba\x25\xdb\x98\x3c\x08\xa7\x63\x6a\x5d\x01\xf9\xa1\xc6\x33\x35\xbe\x54\xac\x7c\x31\x9b\x8c\x3d\x77\x4f\xb9\x7b\x0e\xf5\x9d\xf8\xd0\xdd\xd3\xd7\x6d\x72\x63\x54\xed\x0a\xcb\x27\xc5\x1e\x16\x7d\x9c\x38\x86\xa5\xa9\x1b\x9e\x8d\x2d\xc6\xd1\x22\xd1\x15\xe4\x0c\x97\xf5\x61\x42\x20\x85\x2f\x22\x79\x71\x79\xfd\x76\xfd\xef\xa7\x05\xf8\xe9\x99\x8b\x64\xf8\x43\x95\xcf\x05\x40\x52\x21\x2b\xc8\x0a\x45\x0e\x39\x95\xb7\xeb\x77\xaf\x7f\x97\xdd\x06\x6b\x2e\x71\x7e\xa6\x17\xc0\xb7\x5f\x12\xf7\xfb\x22\x89\x7b\xa8\xe4\xde\xe6\x0f\x9d\x63\xed\x7f\xa1\x9f\x87\xda\xcf\xb4\xb7\x37\x8e\x49\x31\x3a\xe0\x02\xfd\x74\x80\xdd\x80\x82\xf7\x16\xde\x5e\xfe\x0d\x67\x82\x44\x1e\x29\xae\xc7\x80\x4b\xf6\x93\x95\x35\x44\x68\xb8\x7c\x80\xc6\x69\xb3\x05\x75\xce\x1b\xee\x95\xc3\x1c\xac\xe9\xc2\xf9\xd3\x90\x8f\x8f\x10\xf9\x97\xfd\x5e\x4e\x61\x57\xe8\xac\xe8\x40\x33\x65\xe0\x1e\x21\xb3\x66\xa3\xb7\x0d\x61\x0e\xad\x56\x9d\x17\x9a\x56\x93\x35\x7e\x5e\x9f\x66\xe3\xd9\x46\xfe\x89\xef\x0d\x22\x24\x0a\x0a\xc2\x4d\x2a\xfd\x08\xbb\x59\x1c\x8f\x95\x25\xb3\x26\xc3\x9a\x5d\xdc\x50\xe9\x62\x39\x2f\x90\x30\x89\xd5\x1c\x36\x96\xa0\xb2\x84\x02\x40\x9b\x8d\xa5\x4a\xb1\xb6\x06\xd4\xbd\x6d\xd8\xe7\xe2\x40\x9b\xa1\x72\x17\x9f\x96\x6e\x14\xfa\xf1\x51\x6f\x20\x5a\x10\xed\xf7\x5d\x76\x49\x3d\x4f\x1c\x93\x35\xdb\xb9\xcf\xdf\x77\xe1\x7e\x9f\xc4\x87\xa5\xa3\x13\x9a\xbc\x73\xe8\xdd\x87\x36\x1c\x30\x72\xdd\xce\xd7\x05\x0e\x95\x87\x56\x95\x4d\x77\x7e\xbe\x4a\xc7\xca\x68\x37\x4b\x62\x6f\xda\x3b\xf9\x51\x52\x84\x0a\xc8\xee\x5c\x2a\x7f\x93\x90\xd9\xd2\xa5\xf2\xd7\x5f\x24\x10\xaa\xdc\x9a\xf2\x21\x95\x4c\x0d\xca\x8e\xda\x10\x34\xba\xeb\xd0\x3d\xcb\x01\x62\xfe\x44\x63\xc9\xb0\x53\x0e\x4a\xe5\x18\x2a\x9b\xeb\x8d\xc6\x1c\x14\xcf\xe0\x04\xe2\xb6\xce\x15\xe3\x5a\x57\x1e\x27\x3a\xb2\x1a\xf2\x4c\xe2\xbe\x55\x93\xb8\x9f\x85\x2f\xbd\x2c\x1e\xda\xe8\x38\x45\x55\x5d\x42\x0a\xc3\x75\x13\x7d\x68\x1c\x07\xc7\xaf\x8f\xb8\x0b\xe4\x99\xc6\x93\x61\xf4\xc9\x8f\x52\xf0\xfc\x58\x86\xe1\x41\x36\x9f\x55\xea\x60\x07\x9d\xe6\xaf\xd0\xd5\xd6\x38\xfc\x87\x34\x23\x4d\x81\xf0\x1b\xbc\x3a\xec\x7c\x6b\xd0\x71\xa7\xb9\xda\xcb\x04\xcc\x52\x78\x79\x5e\x28\xbc\x94\xde\xae\xae\x66\x63\x29\x9b\x76\x0a\x99\xe3\x06\x09\x3c\x97\x5e\xbd\xbd\x14\x23\x91\xc7\x3a\x53\x8c\x68\xf1\x1d\xb3\x86\x31\xd8\x4d\xa1\x8b\x19\xfe\xd1\x59\xbf\x48\xc1\xe8\xb2\xf3\xef\xaf\xaa\x85\x97\x38\x6f\x85\x44\x87\x8f\x70\xda\x67\x74\xc3\x8a\x1b\xb7\x34\x8c\x64\x54\x79\x83\xd4\x22\x75\x16\xa1\x98\x78\x46\xfb\x20\x14\x27\x37\xc2\xe2\x34\x40\x17\x37\xea\x75\x7c\x64\x22\x26\x13\x42\x6e\xc8\x74\x69\xb9\x43\x1f\x4c\x87\x64\x06\xcb\xe8\xca\x2b\x10\x07\x84\xdf\xa2\xb7\xbd\xda\x07\x61\x7f\x03\xe1\xf3\x71\xf0\x47\xfc\x7e\xf3\xa8\xe0\x29\xbc\x74\x4f\xc2\xfd\x5f\x00\x00\x00\xff\xff\xf4\x31\xc4\x03\xc8\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo"].(os.FileInfo),
	}
	fs["/demo"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket"].(os.FileInfo),
		fs["/demo/runtimevar.variable"].(os.FileInfo),
	}
	fs["/demo/blob.bucket"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket/demo_blob_bucket.go"].(os.FileInfo),
	}
	fs["/demo/runtimevar.variable"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/runtimevar.variable/demo_runtimevar_variable.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
