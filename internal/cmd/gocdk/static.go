// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/demo": &vfsgen۰DirInfo{
			name:    "demo",
			modTime: time.Time{},
		},
		"/demo/blob.bucket": &vfsgen۰DirInfo{
			name:    "blob.bucket",
			modTime: time.Time{},
		},
		"/demo/blob.bucket/demo_blob_bucket.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_blob_bucket.go",
			modTime:          time.Time{},
			uncompressedSize: 4472,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6f\x6f\xe3\xb8\xf1\x7e\x2d\x7e\x8a\x59\xfd\xf0\x6b\xed\x83\x23\xbd\x2d\x02\xd9\x41\xf3\xef\x2e\xd8\xdc\x3a\xd8\x64\x6f\x51\x74\x8b\x3d\x5a\x1a\x59\xac\x25\x52\x4b\x8e\xec\x18\x81\xbf\x7b\x31\xa4\x9c\xd8\x8e\xf7\x2e\x87\xb6\x28\xb0\x1b\xdb\x22\xe7\x99\xe1\xf0\x99\x99\x47\xad\xcc\x17\x72\x8e\xd0\x48\xa5\x85\x50\x4d\x6b\x2c\xc1\x40\x44\x71\x6e\x34\xe1\x23\xc5\x22\x8a\xcb\xc6\x7f\x54\xd4\xd4\x29\x61\xd3\xd6\x92\x90\x1f\x28\xc3\x7f\x35\x52\x5a\x11\xb5\xfc\xdd\xb8\x58\x88\x28\x9e\x9b\xbc\x36\x5d\x91\x14\xb8\x4c\x67\xb5\x99\xc5\x22\xfa\x0a\xaf\x9e\xa6\xa5\xaa\xf1\x37\x96\x1b\x6c\xc2\xea\x50\x88\x34\x85\x87\xe9\xe5\x74\x60\x97\x52\xcf\x51\xd3\xf0\x14\x1e\x2a\xe5\x80\x21\x40\x39\xe8\x1c\xda\x93\xa5\x72\x6a\x56\xe3\x08\x64\x51\x40\x23\xf5\x1a\x72\xd3\x34\xa8\xc9\x01\x3e\xb6\xb5\x54\x5a\xe9\x39\x43\x55\x66\x05\x8a\x60\x65\xec\xc2\x25\x42\x94\x9d\xce\x41\x69\x45\x83\x21\x3c\x89\x88\x0f\x93\xfc\x24\x75\x51\xe3\x75\xa7\xf3\x41\x9c\x16\xd8\x98\x10\x53\x3c\x02\xfe\x3c\xef\xf2\x05\xd2\xb9\x74\x18\xf6\xd9\xe1\x6f\x9b\xd5\xca\xd1\x9e\xe9\xad\x72\xf4\x36\xd3\xa5\xc2\xd5\x9e\xe9\x2f\x0a\x57\x6f\x33\x5d\x59\x45\xb8\x67\xfb\x99\x9f\x3c\x1b\x6f\x84\x58\x4a\x0b\x9d\xad\xc1\x91\xe5\xdc\xf0\xcf\x99\xdf\x09\x3f\xb0\x55\x12\xcc\x76\x9e\x5f\x59\xbb\xdd\x7c\x98\xb7\x23\x77\xf4\xd9\x74\x75\x01\x6e\xad\xf3\x64\xaa\x73\x84\x19\xff\x23\x42\x0b\x54\x49\xdd\xdb\x9e\xc1\xd4\x82\xc5\xdc\xa2\x24\x04\xaa\xd0\x43\xed\xb8\x07\xa3\x01\x65\x5e\x81\xc5\x6f\x1d\x3a\x3a\x13\x47\x9d\x9d\xdf\x4e\xcf\xbf\x9e\x7f\xba\x78\x7f\xf5\xf0\xf5\xd3\xc7\x5b\x70\x95\xf7\x3e\x43\x50\xbd\xfd\x4c\x99\x06\xff\xec\x20\x37\xba\x54\x73\x70\x5d\x5e\x79\x24\xaa\x24\x31\x21\x72\xa9\x79\xbb\x45\x59\x40\x85\x16\x13\x11\xf1\xc9\xd1\xfa\xff\xc6\x8a\x88\x73\x75\x3a\x06\xe3\x92\x1f\x91\x50\x2f\x07\xf1\x81\xd7\x78\x28\x22\x55\xfa\x9c\x8e\xc7\x10\xc7\x9c\x98\x63\xc1\x7a\xf6\x2a\x07\x12\x08\xad\x65\xda\x42\x81\xa5\xec\x6a\x1a\x81\xc5\xc6\x2c\x11\x0c\x67\x2c\x0e\x97\xc8\x5b\x99\xae\x4a\xcf\x13\x11\xf9\x30\xc6\x10\x33\xfb\x4f\xd3\x34\xa5\x86\xab\x6f\x23\xa2\x70\x47\x23\x1f\xf1\x38\xa4\x70\xda\xa2\x0e\x69\x1c\xf4\x25\x9d\x9c\xcb\x7c\x31\xb7\xa6\xd3\xc5\x60\x38\xe2\x50\x43\xcc\x6c\xf4\x6e\x0c\x5a\xd5\x3e\xe8\x97\xfb\x1e\x43\xd9\x50\x72\xdf\x5a\xa5\xa9\x1c\xc4\xd7\x52\xd5\x58\x00\x19\x30\x2d\xea\xdd\x8b\x3a\x85\xff\x5f\xc6\xde\xfb\x90\xc3\xd9\x7c\xbf\x6e\x95\x83\xd6\x22\xd1\x1a\xac\x5c\xc1\x4f\x0f\x3f\xdf\x26\x70\x1f\xee\x6b\x85\x50\xc9\x25\x82\xf4\xd5\x6b\x34\x38\x5a\xd7\x08\xae\x42\xa4\x14\x29\x4f\xa0\x34\x16\x98\xe5\xee\x4c\x88\xdc\x68\x47\x07\x35\xf9\xd0\xf7\x28\x18\xc3\xaf\x22\x7b\x77\x39\xbd\x78\xf8\xdb\xdd\x15\x70\xff\x9a\x88\x2c\x7c\x00\x64\x15\xca\x82\xbf\x00\x64\x0d\x92\x84\xbc\x92\xd6\x21\x8d\xe3\x4f\x0f\xd7\x27\x7f\x89\xfb\x25\x52\x54\xe3\x64\x97\x8d\xec\x3a\x4b\xc3\x73\x91\xa5\x01\x26\x9b\x99\x62\x3d\x11\x51\xd6\x4e\x44\xe4\x8f\xd8\x72\x5b\xe5\xbd\xda\x91\x95\x84\x8e\xa9\xcd\x8d\x0a\x4c\x09\x12\x7e\x34\x70\x71\xf9\x7e\x37\x7b\x89\x88\xb2\xb4\xdd\x62\xdc\x10\x27\x29\xef\xac\x45\x4d\xf5\x1a\x3a\xa7\xf4\x1c\xe4\x5e\x5d\xcc\xa4\xc3\x82\xab\x83\x91\x99\xf2\xf1\xd3\x13\x24\xb0\xd9\xc4\x23\x58\x55\x8a\xd9\xdd\x53\x3a\x30\xbe\xb3\x58\xc0\x52\x49\xbf\x1f\xf5\x52\x59\xa3\xb9\x3f\xc2\x52\x5a\x25\x99\x83\xaf\xe8\xbc\x1f\xd4\x3d\x22\x64\x12\x2a\x8b\xe5\x38\xe6\xd6\xe3\x4e\xd3\x74\x6e\x0a\x93\x27\xc6\xce\xd3\x9d\x16\xfe\x7f\x55\x61\x4f\x3e\x7d\xbc\x75\xf1\x84\x2b\x29\x4b\xe5\xc4\xdf\x5b\x63\x2c\x8a\x48\xe9\xd2\xd8\x46\x92\x32\x1a\xe4\xcc\x74\xc4\xd1\x3b\xae\xd3\x3e\x2d\x7f\xbd\xbb\x71\x2f\xae\x3b\xbe\xb0\x08\x20\xab\xd5\xe4\xd9\x7d\x12\xba\xea\x84\x5b\xa9\x87\xe7\x43\x79\x8a\x73\xc3\x37\xa5\xff\x1d\x48\x9c\xa5\xb5\x3a\x8a\xe0\x9b\xeb\x84\x3b\xea\x51\x04\x09\xae\xc5\x5c\x95\x2a\xf7\x69\xe7\xf8\x0e\x41\xa3\xe8\x00\x32\xd4\xeb\xc4\x77\x5a\x0f\x2a\x41\xe3\x6a\x6b\x4f\xe6\x35\x42\x96\xf2\xf9\xb2\x34\x30\x28\x4b\x03\x41\x7f\xed\xfb\xeb\xd1\x71\x33\x58\x81\x6f\xfc\x1f\xd1\xb5\x46\x3b\xf4\xde\x2c\x77\x8e\x6f\xf0\x43\xbf\xe2\x5b\xa5\x6f\xcc\xd4\xb4\xbe\x6b\x6d\x67\x77\xf2\x73\xe7\x68\xf0\xfc\xeb\x03\xae\x06\x31\x53\x29\x1e\x26\x77\x5c\x02\x83\xe3\xe5\x34\x1c\x06\xa8\xe4\xea\x11\xf3\x8e\x70\xb0\xea\x9b\xc7\xe6\x75\x19\xf2\xa5\xfc\x0f\xcb\x10\xe0\xe9\xc9\x72\xc7\x81\x64\xb3\x09\x00\x85\x5a\x06\x28\x5e\x53\x25\x24\x37\xee\x52\xd9\x7e\xd5\xef\xd8\xde\xe1\xc1\xdc\x3e\x6b\x2d\x96\xea\x71\xcc\xa5\xf5\x1e\xd7\x5c\x5d\x93\x97\xef\x7c\xc5\xcf\xb0\x58\x3b\xfc\x1d\x44\x66\xdc\xd9\x02\xd7\x6f\x82\xd3\xc5\x36\xfa\xb4\x0f\x7f\xcf\x87\x3f\x53\xe6\xc8\x1a\x3d\x9f\x68\xe3\xd3\xef\xb2\xb4\x7f\xb0\x6b\xe3\x81\x8e\x30\xac\x9f\xb3\xaf\x34\x09\xf0\xc1\x43\xc3\x52\x84\x8d\xaf\x4c\x09\xdb\xe9\xd2\x1a\xc7\x42\x6b\x0d\x9d\x2e\xd0\x82\x84\x38\xa4\x28\x66\xbc\x6f\x1d\xda\x35\xb4\xd2\xca\x06\x09\x6d\x02\x57\x3c\x79\x19\x0f\x0b\x28\x94\xc5\x9c\x8c\x5d\x87\xd1\x57\x2b\xbd\xe0\x39\xc2\xab\x61\x08\x3f\x6f\x18\x31\x96\xd4\x45\x18\xdc\xda\xe8\x93\xef\xd8\x72\x42\x83\x2d\x4f\xc3\xe4\xb0\x68\x76\x0e\xf5\x9f\x2f\x1a\xdf\x80\x5e\x17\xcd\x2e\xf9\xb9\x68\x58\x43\x84\x34\xfe\xfd\x1f\x41\x56\xf1\x8e\xe9\xec\x9f\x98\x93\x88\x0a\x2c\xd1\x02\x87\x1d\x64\x54\xc4\x73\x98\x1d\x1f\x94\x9a\x47\x18\x8a\xe8\xc8\xa8\x0e\x2a\xf0\x8a\x25\x0a\xef\x44\x6b\xfb\x1f\xc3\x51\x38\xf2\x3d\x49\xea\xdc\x8d\x26\xb4\x5a\xd6\xf7\x68\x97\x68\xfd\x0e\xc6\xdb\x88\x68\x33\x18\x0a\xaf\x01\x5e\x86\xfe\xbb\x67\xf5\xb2\x0f\xfe\xbc\xe3\x2d\xd0\x16\xa9\xb3\x9a\xb5\x80\x88\x4c\x4b\x8e\xcf\xf5\xa7\x97\x0c\xb4\x3c\x00\x1c\xfb\xb8\xc4\x5a\x35\x7c\x1d\xa7\x10\xa7\xf1\x48\x44\xd1\x9d\xa7\xd4\x29\xf3\xdc\xe2\xb7\xe4\xda\xd8\xe6\x17\x59\x77\x38\xd8\x92\x6d\x38\xf2\x92\x87\x8d\x18\x36\xc4\xe5\x71\x07\xec\x6a\x28\xa2\x9c\x1e\x79\x85\xcd\x2f\x82\xf4\x19\x0c\x45\xc4\x53\x88\x5d\x72\x3e\x83\x52\x3a\x1d\x73\x72\x6d\xf2\x81\x77\xe4\xf4\xb8\x93\xe4\xf1\x18\x94\x49\xae\xa6\xd7\x21\xcf\x33\x8b\x72\x11\x52\xf6\xfb\xd7\xf0\x1d\xd1\xc4\xae\xbc\xd0\x35\xa0\xf1\x91\xf6\x06\xfa\x02\xd7\x3b\x1a\xea\x2d\x19\x7e\x4e\x71\x88\xc9\xb3\x6c\x0c\xb2\x6d\x51\x17\x03\xff\x33\x30\x67\x2b\xc8\x0e\xca\x63\xe7\x65\xe2\x8f\x95\xc7\x7f\x93\x2b\x47\xc5\xfd\x7a\x57\x1f\xf7\x7d\x87\x45\x04\xac\x14\x55\x9c\x38\xd0\xb2\x41\x28\xac\x69\x4f\x0a\xb3\xe2\x97\x0b\x47\x2c\xe4\x4d\xe9\x01\xbd\x80\x67\x09\x65\x3a\x56\x5a\x6c\xd0\x73\x63\x87\x5a\x0b\x5c\xf7\x02\x9e\xd7\xc7\xdf\x39\x56\xfc\x85\x37\x7e\x89\x43\x23\xe2\x97\x12\xc5\xc2\xea\xa5\xe7\xc5\x7b\xe7\x3d\x97\xc5\x36\x73\x07\x25\x71\x9c\xa0\xfc\xfa\xc1\x89\xef\xa9\xd9\x13\xfb\x03\xae\x3e\xfa\x05\x66\xe8\x88\xe3\x1b\x31\xf1\x8e\x4a\xf7\x37\xf1\xb0\x7f\xdf\x0a\xa0\xcc\xba\x2f\xfa\x18\xef\x3e\x18\xba\xe6\x57\x85\x83\x2b\x0a\x5d\x2b\x84\x9a\x5c\xd4\xc6\x21\x87\xae\x4c\x72\x61\xda\x35\x7b\x0d\x4b\xc3\x23\x9c\xdb\x7d\x09\xfd\x63\xa4\xfb\x37\x78\xc1\xa3\xc4\x6b\xb0\xad\xbe\x4b\x3c\xdc\xe7\x0a\x83\xa6\xf3\x26\xca\xc1\xdd\xf4\xfe\x01\x8b\x11\x78\x19\x17\xb4\xda\xae\x15\xf4\x02\x6e\x81\xeb\x44\x1c\xd2\xe2\xc2\x34\x4c\x30\x67\x8c\x7e\x17\x1f\x26\xf1\xa6\x69\x6b\x64\xb1\x8d\x05\x27\xe5\x5f\x01\x00\x00\xff\xff\xff\xd0\x66\x4c\x78\x11\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo"].(os.FileInfo),
	}
	fs["/demo"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket"].(os.FileInfo),
	}
	fs["/demo/blob.bucket"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket/demo_blob_bucket.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
