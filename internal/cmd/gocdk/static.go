// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/demo": &vfsgen۰DirInfo{
			name:    "demo",
			modTime: time.Time{},
		},
		"/demo/blob.bucket": &vfsgen۰DirInfo{
			name:    "blob.bucket",
			modTime: time.Time{},
		},
		"/demo/blob.bucket/demo_blob_bucket.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_blob_bucket.go",
			modTime:          time.Time{},
			uncompressedSize: 5268,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xff\x6f\xdb\xba\x11\xff\xd9\xfa\x2b\xae\x1a\xb6\xd9\x0f\x8e\xd4\xf5\xa7\x2d\xb3\x53\xe4\x8b\xf3\x6a\x34\x2f\x2e\x62\xa7\x45\xb1\x0e\x7d\xb4\x74\xb6\x38\x4b\xa4\x4a\x9e\xac\x08\x45\xfe\xf7\xe1\x48\xd9\xb1\x13\xe7\xbd\x14\xc3\xb0\x15\x4d\x62\x89\xe4\x87\x77\xc7\xfb\x7c\xee\xe8\x38\x86\x73\x5d\x36\x46\x2e\x33\x82\x37\xaf\xff\xf2\x37\x98\x65\x08\x3f\x6b\x38\xcf\x75\x95\xc2\x69\x45\x99\x36\x36\x88\xe3\x20\x8e\xe1\x4a\x26\xa8\x2c\xa6\x50\xa9\x14\x0d\x50\x86\x70\x5a\x8a\x24\xc3\xcd\x48\x1f\x3e\xa2\xb1\x52\x2b\x78\x13\xbd\x86\x2e\x4f\x08\xdb\xa1\xb0\xf7\x77\x86\x68\x74\x05\x85\x68\x40\x69\x82\xca\x22\x50\x26\x2d\x2c\x64\x8e\x80\x77\x09\x96\x04\x52\x41\xa2\x8b\x32\x97\x42\x25\x08\xb5\xa4\xcc\xed\xd3\xa2\x44\x8c\xf1\xb9\xc5\xd0\x73\x12\x52\x81\x80\x44\x97\x0d\xe8\xc5\xee\x44\x10\xd4\x1a\xcd\xff\x32\xa2\xd2\x1e\xc7\x71\x5d\xd7\x91\x70\x16\x47\xda\x2c\xe3\xdc\xcf\xb5\xf1\xd5\xf8\x7c\x74\x3d\x1d\x1d\xbd\x89\x5e\xb7\xab\x6e\x55\x8e\xd6\x82\xc1\x6f\x95\x34\x98\xc2\xbc\x01\x51\x96\xb9\x4c\xc4\x3c\x47\xc8\x45\x0d\xda\x80\x58\x1a\xc4\x14\x48\xb3\xd5\xb5\x91\x24\xd5\xb2\x0f\x56\x2f\xa8\x16\x06\x19\x26\x95\x96\x8c\x9c\x57\xb4\x17\xb4\x8d\x8d\xd2\xee\x4d\xd0\x0a\x84\x82\xf0\x74\x0a\xe3\x69\x08\x67\xa7\xd3\xf1\xb4\xcf\x20\x9f\xc6\xb3\x77\x93\xdb\x19\x7c\x3a\xbd\xb9\x39\xbd\x9e\x8d\x47\x53\x98\xdc\xc0\xf9\xe4\xfa\x62\x3c\x1b\x4f\xae\xa7\x30\xb9\x84\xd3\xeb\xcf\xf0\x7e\x7c\x7d\xd1\x07\x94\x94\xa1\x01\xbc\x2b\x0d\x7b\xa0\x0d\x48\x0e\x27\xa6\x2e\x76\x53\xc4\x3d\x13\x16\xda\x9b\x64\x4b\x4c\xe4\x42\x26\x90\x0b\xb5\xac\xc4\x12\x61\xa9\xd7\x68\x94\x54\x4b\x28\xd1\x14\xd2\xf2\xb1\x5a\x10\x2a\x65\x98\x5c\x16\x92\x04\xb9\x57\x4f\xfc\x8a\x82\xa0\x14\xc9\x8a\x41\x0a\x21\x55\x10\xc8\xa2\xd4\x86\xa0\x1b\x74\xc2\x44\x2b\xc2\x3b\x0a\x83\x4e\xb8\x28\xdc\x9f\x8c\x8a\x3c\x26\x2c\xca\x5c\x10\xf2\x0b\xa9\xf9\xb7\x42\x8a\xf9\xd8\xf8\xb3\xb6\x61\x10\x74\xc2\xa5\x4e\x38\x29\xa3\x14\xd7\xf1\x3c\xd7\xf3\x30\xe8\x7c\x85\x27\x6f\x63\xce\xa6\xdf\x18\x2e\xb0\xf0\xa3\xbd\x80\x3d\x99\x4d\x2e\x26\x5d\xb3\x16\x6a\x89\x8a\x7a\xc7\x30\xdb\x26\xa4\xb4\x9c\xa1\xe6\x68\x2d\xad\x9c\xe7\xd8\x07\x91\xa6\x50\x08\xd5\x70\x82\x16\xa8\xc8\x72\x90\x73\x21\x39\x48\x0c\x95\xe9\x1a\x24\x41\xad\xcd\xca\x46\x41\xb0\xa8\x54\x02\x52\x49\xea\xf6\xe0\x7b\xd0\x61\x67\xa2\x77\x42\xa5\x39\x5e\x56\x2a\xe9\x86\x71\x8a\x85\x76\x36\x45\xf3\x2a\x59\x21\xc5\x61\x1f\xf8\xf1\xcc\x3d\x9d\x09\x8b\x7e\xba\xe9\xbd\x68\x75\x2e\x2d\xed\x21\x5c\x49\x4b\x3f\x84\xb0\x96\x58\xef\x21\x7c\x94\x58\xff\x10\x02\x93\x00\xf7\x20\x3e\xf1\x9b\x2d\xc6\x7d\x10\xac\x85\x01\x3f\xfb\xf6\xe6\x0a\x38\xfb\xd5\x72\xe7\x25\xfc\xe4\xf0\xfc\xe2\x9d\xf7\x23\x63\x36\x93\x1f\x47\xf6\xc0\x29\x7e\xd2\x55\x9e\x82\x6d\x54\x12\x4d\x58\x47\xe6\xfc\x9f\xc8\xe5\xa9\x50\xed\xda\xb7\x30\x31\x60\x30\x31\x28\xc8\xb1\xc2\x41\xed\x6c\xcf\x8c\x44\x91\x64\x4e\x06\xd0\xd2\xdb\xe0\xe0\x66\x67\x57\x93\xb3\xaf\x67\xb7\xe7\xef\x47\xb3\xaf\xce\xa7\xcc\xed\x3e\x47\x96\x05\xb7\x7e\x2e\x75\x81\x7f\xb6\x90\x68\xb5\x90\x4b\xb0\x55\x92\x39\x24\xca\x04\x71\xca\x24\x42\xf1\x74\x83\x22\x85\x0c\x0d\x46\x41\x87\x3d\x47\xe3\x7e\xb4\x09\x3a\x0f\x11\x1b\x82\xb6\xd1\xcf\x48\xa8\xd6\xdd\xf0\xd1\xd6\x61\x2f\xe8\xc8\xc5\x4e\x78\x87\x43\x08\x43\x8e\xd1\x21\xbb\x5d\xaa\x4b\x0b\x02\x08\x8d\xe1\x1c\x87\x14\x17\xa2\xca\xa9\x0f\x06\x0b\xbd\x46\xd0\x1c\xbc\xd0\x9f\x2a\x4f\xe5\xdc\x96\x6a\x19\x05\x9d\x3d\x8b\x42\x26\xcc\x71\x1c\xc7\x54\x30\x61\xef\x37\xf6\xf6\x9d\x0b\x43\x1f\xd3\x49\x89\xca\xc7\xb5\xdb\xaa\x40\x74\x26\x92\xd5\xd2\xe8\x4a\xa5\xdd\x5e\xff\xc1\x6c\xef\x05\x2f\x7d\x35\x04\x25\x73\xe7\xc0\x43\x1a\x0c\x61\x51\x50\x34\x2d\x8d\x54\xb4\xe8\x86\x97\x42\xe6\x5e\x85\x75\x89\x6a\xf7\xfc\x8e\xe1\x8f\xeb\xd0\xd9\xd0\x63\xa3\xee\x9f\x27\xbc\xb4\x50\x1a\x24\x6a\xc0\x88\x1a\xde\xcd\x7e\xb9\x8a\x60\xea\x8f\xb1\x46\xc8\xc4\x1a\x5d\x99\x29\x0a\xad\xc0\x52\x93\x23\xd8\x0c\x91\x62\xa4\x24\x72\x1a\xca\x4c\xb0\x6f\xdd\x06\x63\x55\x56\x74\x0c\x5d\x9f\xad\xbd\xbd\x84\xba\xbd\xb9\x8a\x82\x44\x2b\x4b\x8f\x98\x3e\x6b\x05\x10\x86\xf0\x6b\x30\x78\x75\x31\x39\x9f\x7d\xfe\x30\x02\x16\xc7\x93\x60\xb0\xf9\x83\x22\x3d\x09\x00\x06\x05\x92\x80\x24\x13\xc6\x22\x0d\xc3\xdb\xd9\xe5\xd1\x5f\x43\x37\x40\x92\x72\x3c\xd9\xdd\x91\x0d\x1b\xc4\xfe\x7d\x30\x88\x3d\xc4\x60\xae\xd3\xc6\x2d\x28\xf9\x37\xf8\x20\x94\xac\xd8\x3c\x5f\x59\x32\x82\xd0\x3a\x51\xe7\x2a\xad\x17\x20\x5c\x53\x70\xf1\x7e\xd7\x9d\x88\x11\xe2\x72\x17\x68\x4c\x1c\xcb\xa4\x32\x06\x15\xe5\x0d\x54\x96\x2b\x88\xd8\x0b\xc2\x5c\x58\x5f\xed\x18\x9e\x13\x28\xfc\xfe\x1d\x22\xb8\xbf\x0f\xfb\x50\x67\x32\xc9\x1c\x52\xcb\x09\x4f\x99\x8a\x6b\xf0\x5a\x0a\xb7\x04\xd5\x5a\x1a\xad\x58\x82\x61\x2d\x8c\x74\x25\xf9\x09\x15\x0e\x18\xc7\xc5\x6f\x20\x20\x33\xb8\x18\x86\x9b\x9e\x60\xa9\x53\x9d\xb8\x76\x60\xa7\x54\xfc\x21\x4b\xcd\xd1\xed\xcd\x95\x0d\x4f\x98\x8f\x83\x58\x9c\xb8\x63\x2e\xb4\x41\x07\x25\xd5\x42\x9b\xc2\x55\x40\x10\x73\x5d\xb9\xa3\xb5\x4c\xf8\x36\x4c\xa7\x1f\xc6\x76\xd7\x84\x2a\xf7\x36\x0c\x72\x79\xb2\xb5\x21\xf2\xa2\x7d\xc2\x4a\xed\xf6\x60\xf7\x1c\x39\xb8\xba\xb4\x1d\x8d\x4f\xfc\x41\x9c\xcb\x83\x08\x4e\xb4\x4f\x58\xa9\x0f\x22\x88\x87\xd2\xce\x67\xc0\x16\xbe\x00\xd4\x33\xfe\xc4\x89\xb7\x83\x15\xa0\xb0\xde\x20\x90\x3e\x80\x31\x88\xd9\xc5\x41\xec\x53\x6b\x10\xfb\x9c\xfd\xb5\x55\xeb\x83\x75\xad\x5b\xbb\xce\x2c\xba\x41\x5b\x6a\x65\xd1\x6d\x67\x58\x7c\xbe\xc1\x4f\xed\x88\x13\x5e\x27\xf3\x54\x94\x39\x1c\x0f\x61\xd3\x2b\x44\xbf\x54\x96\xba\xdb\xa7\x6b\xac\xbb\x21\xa7\x56\xd8\x8b\x3e\x30\x33\xba\x87\x19\xd6\xeb\x05\x1d\x96\x16\x46\x2a\xca\x3c\x1a\xdd\x61\x52\x11\x76\xeb\xdf\x13\x20\x67\xd0\x88\xe5\x98\xe7\xa2\x31\xed\x43\xaf\xef\xbd\x98\x92\xa0\xca\x8e\x15\xa1\x51\x22\x9f\xa2\x59\xa3\x71\x33\x76\xc4\xa7\xd5\x86\x7f\xfc\xd3\x57\x39\x3e\xf7\xc9\xfc\x5f\x98\xd0\x53\x55\xe0\xb1\xff\x91\x2a\x7c\xff\x6e\x58\x1e\x21\xba\xbf\xf7\xc9\x91\xca\xb5\x4f\x13\x1e\x93\x0b\x88\xc6\xf6\x42\x9a\x76\xd4\xcd\xd8\xa4\xce\x43\x4b\xe0\x52\xfb\x6d\x69\x70\x21\xef\x86\x4c\xf0\xf7\xd8\x30\xc7\x4f\x1e\x3e\x73\x66\x6d\x61\x31\xb7\xf8\x3b\x88\x9c\xea\x6f\x57\xd8\xbc\x08\x4e\xa5\x1b\xeb\xe3\xd6\xfc\xbd\x3d\x9c\x4f\x4a\xbb\x80\x3b\xde\x6e\xb2\xf9\x61\xb2\x43\x38\x90\xd0\x6d\x93\xf0\xa4\xc9\x02\xf6\xd8\x8b\xa6\x24\x2c\x1c\xaa\x80\x4d\x25\x2c\xb5\xe5\x3e\xb2\x69\xfb\x65\x01\xa1\x8f\x4d\xc8\x78\xdf\x2a\x34\x0d\x94\xc2\x88\x02\x09\x4d\x04\x23\x6e\x1b\x18\x0f\x53\x48\xa5\xc1\x84\xb4\x69\x7c\xb1\xce\xa5\x5a\x71\xb5\xe3\x51\xdf\x41\x6c\x27\xb8\xeb\x82\x50\xa9\xef\x3a\x94\x56\x47\xcf\xac\xe5\x48\xfa\xb5\x5c\xb9\xa3\xc7\x1c\xdd\x71\xea\xc7\x38\xba\x6d\x3e\x46\x9e\x3b\x6d\xf3\xb1\x4f\x9d\xed\x8c\x17\x10\xa7\x63\x90\x2a\xa3\x5c\x4f\xa1\x4b\xb2\x4c\xdb\x3f\x3d\x70\xa7\x74\x57\x10\xde\xe2\x02\xdd\x9d\x04\xcd\x31\x84\x71\xd8\x0f\x3a\x9d\x0f\x2e\xbc\xc7\x7c\xd8\x06\xbf\x45\x97\xda\x14\x1f\x45\x5e\x61\x77\x13\xf8\x5e\xdf\xc1\xf2\x22\x86\xf5\x66\x39\xdc\x2e\x6f\xd5\x0b\x3a\x09\xdd\xf1\x08\x2f\x3f\xf7\x2d\x4b\xb7\xe7\x5b\x33\x7f\xc0\x4f\x79\x1c\x74\xb8\x4c\xb0\x41\x3c\xc3\xf7\x3f\xc7\x43\x9e\x6e\xa2\x6b\x5e\x9f\xd0\x1d\xbb\xd5\xca\xcb\x70\x08\x52\x47\xa3\xc9\xa5\x5b\xd2\x99\x1b\x14\xab\xa0\xc3\x56\x1d\x10\xa0\x47\x61\x7c\xa6\x09\xe2\xad\x5c\x3f\xab\x41\xe1\x1d\xed\x55\xde\x15\x36\x3b\x3d\xd1\x4b\xc2\xbf\x8d\xbf\xb7\xc9\x79\x3d\xe4\xab\x30\xaa\xb4\xeb\x1e\xfb\x2e\x16\x4e\xe3\x5e\xa6\xd1\xae\xe4\x3d\xd5\xe8\x5d\xbd\xfb\x0d\x8d\x76\x7b\xfe\x77\xf4\xf9\x11\x09\x76\x2e\x3f\xff\x47\x24\x38\x74\xff\x68\x76\xfb\xf6\x56\x5d\xb8\x3d\xf1\x5f\x9f\xac\xb0\x01\x25\x0a\x84\xd4\xe8\xf2\x28\xd5\x35\xdf\x7f\x2c\xf1\x5d\x43\x2f\x1c\xa0\xbb\x63\x70\x9f\xa6\x2b\x8a\x82\x0e\x2f\x68\xb3\x7e\x87\x34\x2b\x6c\xda\xeb\x05\x8f\x0f\x9f\x71\x2b\xfc\xc2\x13\xbf\x84\x5e\x6e\xb6\x5f\x9f\x3c\x28\x5b\xb8\xe7\xef\x99\x48\x37\x91\xdb\x73\xf3\x39\xea\xf1\x0d\x89\x03\xdf\x26\x47\x4b\xd9\x6b\xac\x6f\xdc\x00\xb3\xab\xcf\xf6\xf5\x39\x2b\x5e\x90\x25\xcf\x70\xa8\xbd\x12\x7a\x50\x66\xcc\x17\x75\x88\x33\xd7\x9a\x2e\xf9\xf2\xf2\xe8\x88\x52\x5c\xa0\x01\x6f\x6a\x74\x9e\x6b\x8b\x6c\xba\xd4\xd1\xb9\x2e\x1b\xde\xd5\x0f\xf5\x0e\xe4\xdc\xee\x6d\xf9\xc7\x92\xee\x3f\xc8\x0b\x2e\x18\xae\xb3\xdb\xf4\x8d\x91\x83\xfb\x94\xa1\xef\x15\xdd\x12\x69\xe1\xc3\x64\x3a\xc3\xb4\xef\xbe\xe9\xf2\xdf\x22\xed\xad\x82\xb6\x2d\x5c\x61\x13\x05\x8f\xd3\xe2\x5c\x17\x9c\x60\x56\x6b\xf5\x2a\x7c\x1c\xc4\x71\x51\xe6\xc8\xed\x3c\xa6\x1c\x94\x7f\x07\x00\x00\xff\xff\xb5\x6e\x05\x56\x94\x14\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo"].(os.FileInfo),
	}
	fs["/demo"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket"].(os.FileInfo),
	}
	fs["/demo/blob.bucket"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket/demo_blob_bucket.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
