// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/demo": &vfsgen۰DirInfo{
			name:    "demo",
			modTime: time.Time{},
		},
		"/demo/blob.bucket": &vfsgen۰DirInfo{
			name:    "blob.bucket",
			modTime: time.Time{},
		},
		"/demo/blob.bucket/demo_blob_bucket.go": &vfsgen۰CompressedFileInfo{
			name:             "demo_blob_bucket.go",
			modTime:          time.Time{},
			uncompressedSize: 4726,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\x59\x15\x6d\xe5\x83\x23\x7d\x2d\x02\xdb\x41\xf3\x76\x17\x6c\x6e\x1d\xe4\xe5\x16\x45\xb7\xd8\xa3\xa5\x91\xc5\x5a\x22\xb5\xe4\xc8\x8e\x11\xe4\xbf\x17\x43\xca\x8e\xec\x38\xdb\x2c\x8a\xa2\x05\x12\xdb\x12\xc9\x87\xf3\xf6\x3c\x1c\x36\x22\x5b\x88\x39\x42\x2d\xa4\x0a\x43\x59\x37\xda\x10\xc4\x61\x10\x65\x5a\x11\x3e\x52\x14\x06\x51\x51\xbb\xaf\x92\xea\x2a\x25\xac\x9b\x4a\x10\xf2\x0b\xa9\xf9\x53\x21\xa5\x25\x51\xc3\xbf\xb5\x8d\xc2\x30\x88\xe6\x3a\xab\x74\x9b\x27\x39\x2e\xd3\x59\xa5\x67\x51\x18\x7c\x85\x57\x6f\xd3\x42\x56\xf8\x9d\xe1\x1a\x6b\x3f\x3a\x08\xc3\x34\x85\xfb\xe9\xf9\x34\x36\x4b\xa1\xe6\xa8\x68\x70\x0c\xf7\xa5\xb4\xc0\x10\x20\x2d\xb4\x16\xcd\xd1\x52\x5a\x39\xab\x70\x08\x22\xcf\xa1\x16\x6a\x0d\x99\xae\x6b\x54\x64\x01\x1f\x9b\x4a\x48\x25\xd5\x9c\xa1\x4a\xbd\x02\x49\xb0\xd2\x66\x61\x93\x30\x2c\x5a\x95\x81\x54\x92\xe2\x01\x3c\x85\x01\x3b\x93\xfc\x22\x54\x5e\xe1\x65\xab\xb2\x38\x4a\x73\xac\xb5\xb3\x29\x99\xb5\xd9\x02\x29\x8d\x86\xc0\x8f\xa7\xee\xe9\x54\x58\xf4\xd3\xcd\xe0\x5d\xab\x2b\x69\x69\x07\xe1\x5a\x5a\xfa\x21\x84\xa5\xc4\xd5\x0e\xc2\x6f\x12\x57\x3f\x84\xb0\x32\x92\x70\x07\xe2\x33\xbf\xd9\x62\x3c\x87\xe1\x52\x18\xf0\xb3\x1f\x6e\xaf\xc1\x92\xe1\xe8\xbd\xbc\x84\x9f\x1c\x9e\x5f\xdc\x7b\x7f\x61\xcc\x66\xf2\x7e\x64\x0f\x64\xf1\xb3\x6e\xab\x1c\xec\x5a\x65\xc9\x54\x65\x08\x33\xfe\x23\x42\x03\x54\x0a\xd5\xad\x3d\x81\xa9\x01\x83\x99\x41\x41\x08\x54\xa2\x83\xea\x6d\x0f\x5a\x01\x8a\xac\x04\x83\xdf\x5a\xb4\x74\x12\x1e\xdc\xec\xf4\x7a\x7a\xfa\xf5\xf4\xe1\xec\xe3\xc5\xfd\x57\xe7\x53\xe9\x76\x9f\x21\xc8\x6e\xfd\x4c\xea\x1a\xff\x6c\x21\xd3\xaa\x90\x73\xb0\x6d\x56\x3a\x24\x2a\x05\x71\xc9\x64\x42\xf1\x74\x83\x22\x87\x12\x0d\x26\x61\xc0\x9e\xa3\x71\xff\xda\x84\xc1\x4b\xc4\xc6\xa0\x6d\xf2\x33\x12\xaa\x65\x1c\xed\x6d\x1d\x0d\xc2\x40\x16\xbd\xf0\x8e\xc7\x10\x45\x1c\xa3\x43\x76\xbb\x52\x97\x16\x04\x10\x1a\xc3\x35\x0e\x39\x16\xa2\xad\x68\x08\x06\x6b\xbd\x44\xd0\x1c\xbc\xc8\x67\x95\xa7\x72\x6d\x4b\x35\x4f\xc2\x60\xc7\xa2\x88\x09\x73\x9c\xa6\x29\xd5\x4c\xd8\xe7\x8d\xbd\x43\xe7\xc2\xd8\xc7\x74\xda\xa0\xf2\x71\x8d\x3b\x15\x48\x4e\x45\xb6\x98\x1b\xdd\xaa\x3c\x1e\x0c\x5f\xcc\xf6\x5e\xf0\xd2\x0f\x63\x50\xb2\x72\x0e\xbc\x94\xc1\x18\x8a\x9a\x92\xbb\xc6\x48\x45\x45\x1c\x5d\x0a\x59\x61\x0e\xa4\x41\x37\xa8\xfa\xf9\x3b\x86\x3f\x2e\x23\x67\xc3\x80\x8d\x7a\x7e\x9b\xf0\xd2\x42\x63\x90\x68\x0d\x46\xac\xe0\x97\xfb\x5f\xaf\x13\xb8\xf3\x69\x5c\x21\x94\x62\x89\x20\x1c\xed\xb5\x02\x4b\xeb\x0a\xc1\x96\x88\x94\x22\x65\x09\x14\xda\x00\x33\xc1\x9e\xb8\x0d\xae\x54\xd3\xd2\x31\xc4\xbe\x5a\x07\x3b\x05\xf5\x70\x7b\x9d\x84\x99\x56\x96\xf6\x98\x7e\xdf\x09\x20\x8c\xe1\xf7\x70\xf4\xe1\x7c\x7a\x76\xff\xb7\x9b\x0b\x60\x71\x9c\x84\xa3\xcd\x17\x8a\x7c\x12\x02\x8c\x6a\x24\x01\x59\x29\x8c\x45\x1a\x47\x0f\xf7\x97\x47\x7f\x89\xdc\x00\x49\xaa\x70\xd2\xdf\x91\x0d\x1b\xa5\xfe\x7d\x38\x4a\x3d\xc4\x68\xa6\xf3\xb5\x5b\xd0\xf0\x27\xf8\x20\x34\xac\xd8\x3c\x5f\x59\x32\x82\xd0\x32\x27\x58\x03\x41\x17\x20\xe0\x67\x0d\x67\xe7\x1f\xfb\xee\x24\x8c\x90\x36\x7d\xa0\x2b\xe2\x58\x66\xad\x31\xa8\xa8\x5a\x43\x6b\xa5\x9a\x83\xd8\x09\xc2\x4c\x58\xcc\x99\x5b\x0c\xcf\x05\x14\x3d\x3d\x41\x02\xcf\xcf\xd1\x10\x56\xa5\xcc\x4a\x87\xd4\x71\xc2\x53\xa6\x35\x98\xc3\x52\x0a\xb7\x04\xd5\x52\x1a\xad\x58\x82\x61\x29\x8c\x14\x5c\xb9\xaf\xa8\x70\xc0\xb8\x3b\x44\x18\x09\x28\x0d\x16\xe3\x88\xd5\xcc\x1e\xa7\xe9\x5c\xe7\x3a\x4b\xb4\x99\xa7\xbd\xa3\xe2\x0f\x65\x6e\x8e\x1e\x6e\xaf\x6d\x34\x61\x3e\x8e\x52\x31\x71\x69\xae\xb5\x41\x07\x25\x55\xa1\x4d\x2d\x48\x6a\x05\x62\xa6\x5b\x97\x5a\xcb\x84\xef\xc2\xf4\xd7\x9b\x2b\xdb\x37\xa1\xad\xbc\x0d\xa3\x4a\x4e\xb6\x36\x24\x5e\xb4\x27\xac\xd4\x6e\x0f\x76\xcf\x91\x83\x4f\x17\x5d\xb8\x67\x5f\xf8\xa3\xb4\x92\x07\x11\x9c\x68\x4f\x58\xa9\x0f\x22\x08\xb0\x0d\x66\xb2\x90\x99\xcb\x01\x5b\xf8\x0e\x50\xcf\xf8\x89\x13\x6f\x07\x2b\x40\xe1\x6a\x83\x40\xfa\x00\xc6\x28\x65\x17\x47\xa9\x2f\xad\x51\xea\x6b\xf6\xf7\x4e\xad\x0f\x9e\x6b\xf1\x0a\xdc\x99\x72\x8b\xb6\xd1\xca\xa2\xdb\xce\xb0\xf8\x7c\x83\x9f\xba\x11\x27\xbc\x4e\xe6\xa9\x6e\x2a\x38\x1e\xc3\xa6\x57\x48\x7e\x6d\x2d\xc5\xdb\xa7\x4f\xb8\x8a\x23\x2e\xad\x68\x90\xdc\x30\x33\xe2\xc3\x0c\x1b\x0c\xc2\x80\xa5\x85\x91\xea\xa6\x4a\x2e\x1e\x31\x6b\x09\xe3\xd5\xbf\x13\x20\x67\xd0\x05\xcb\x31\xcf\x45\x63\xba\x87\xc1\xd0\x7b\x71\x47\x82\x5a\x7b\xa5\x08\x8d\x12\xd5\x1d\x9a\x25\x1a\x37\xa3\x27\x3e\x9d\x36\xfc\xfd\x1f\xfe\x94\xe3\xbc\x4f\x67\xff\xc4\x8c\x5e\xab\x02\x8f\xfd\x8f\x54\xe1\xe9\xc9\xb0\x3c\x42\xf2\xfc\xec\x8b\x23\x97\x4b\x5f\x26\x3c\x26\x0b\x48\xae\xec\xb9\x34\xdd\xa8\x9b\xb1\x5b\xd1\x27\x8d\xc1\x42\x3e\x8e\x99\xd7\x1f\x71\xcd\xd4\x9e\xbc\xfc\xe6\x82\xda\xa2\x61\x65\xf1\x30\x10\x17\xf6\xc9\x02\xd7\xef\x42\x51\xf9\xc6\xd6\xb4\x33\x76\x07\xda\x79\xa0\xb4\x0b\xaf\x63\xe9\xa6\x76\x5f\x26\x3b\x84\x03\xe5\xdb\xb5\x04\xaf\x5a\x2a\x60\x47\xbd\x44\x4a\xc2\xda\xa1\x0a\xd8\x9c\x7b\x8d\xb6\xdc\x35\xae\xa1\x55\x39\x1a\x10\x10\xf9\x90\x44\x8c\xf7\xad\x45\xb3\x86\x46\x18\x51\x23\xa1\x49\xe0\x82\x9b\x04\xc6\xc3\x1c\x72\x69\x30\x23\x6d\xd6\xfe\x68\xae\xa4\x5a\xf0\xd9\xc6\xa3\xbe\x5f\xd8\x4e\x18\x32\x96\x50\xb9\xef\x31\x94\x56\x47\x6f\xac\xe5\x48\xfa\xb5\x7c\x4e\x27\xfb\x8c\xec\x39\xf5\x63\x8c\xdc\xb6\x1a\x17\x9e\x29\x5d\xab\xb1\x4b\x94\xed\x8c\x77\xd0\x24\x30\x48\xad\x51\xae\x83\xd0\x0d\x59\x26\xe9\x9f\x5e\x98\xd2\xb0\xdc\x5a\xde\xe2\x1c\x2b\x59\xb3\x69\xc7\x10\xa5\xd1\x30\x0c\x82\x1b\x17\xde\x63\x4e\xb6\xc1\x6f\xc9\xa5\x36\xf5\x6f\xa2\x6a\x31\xde\x04\x7e\x30\x74\xb0\xbc\x88\x61\xbd\x59\x0e\x37\xe6\xad\x06\x61\x90\xd1\x23\x8f\xf0\xf2\x33\xdf\xa0\xc4\x03\xdf\x88\xf9\x04\xbf\x66\x6d\x18\xf0\xa1\xc0\x06\xf1\x0c\xdf\xed\x1c\x8f\x79\xba\x49\x3e\xf1\xfa\x8c\x1e\xd9\xad\x4e\x4c\xc6\x63\x90\x3a\xb9\x98\x5e\xba\x25\xc1\xcc\xa0\x58\x84\x01\x5b\x75\x40\x6e\xf6\xc2\xf8\x46\xcb\xc3\x5b\xb9\xee\x55\x83\xc2\x47\xda\x39\x67\x17\xb8\xee\x75\x40\xef\x09\xff\x36\xfe\xde\x26\xe7\xf5\x18\x44\xd3\xa0\xca\x63\xf7\x38\x74\xb1\x70\x8a\xf6\x3e\x45\x76\x07\xdc\x6b\x45\xee\xab\xdb\x77\x14\xd9\xed\xf9\xdf\x51\xe3\x3d\x12\xf4\xae\x3a\xff\x47\x24\x38\x74\xdb\x58\xf7\xbb\xf4\x4e\x5d\xb8\x19\x81\x95\xa4\x92\x93\x0e\x4a\xd4\x08\xb9\xd1\xcd\x51\xae\x57\x7c\xdb\xb1\xc4\x37\x0b\x5d\x38\x40\x77\xa3\xe0\xae\x4c\xb7\x94\x84\x01\x2f\xe8\xaa\xbe\x47\x9a\x05\xae\xbb\xcb\x04\x8f\x8f\xdf\x70\x2b\xfa\xc2\x13\xbf\x44\x5e\x6e\xf8\x96\x24\xb9\x51\x7b\x51\xb6\x68\xc7\xdf\x53\x91\x6f\x22\xb7\xe3\xe6\x5b\xd4\xe3\xfb\x10\x07\xbe\x2b\x8e\x8e\xb2\x9f\x70\x75\xeb\x06\x98\x5d\x43\xb6\x6f\xc8\x55\xf1\x8e\x2a\x79\x83\x43\xdd\x05\xd0\x83\x32\x63\xbe\xa8\x43\x9c\xf9\xa4\xe9\x92\xaf\x2a\x7b\x29\xca\xb1\x40\x03\xde\xd4\xe4\xac\xd2\x16\xd9\x74\xa9\x93\x33\xdd\xac\x79\x57\x3f\x34\x38\x98\xcc\x33\xad\xac\xe4\x14\x5a\x24\xe2\x9c\x9c\xf9\xd6\xed\xe8\x7e\xdd\xe0\x70\xfb\x74\x8d\x6a\x4e\x25\x94\x0e\xc9\x26\x07\xca\xb7\x7f\xcd\xfe\xb1\xfa\xfd\x0f\x4a\x8c\xcf\x1e\xd7\x12\x6e\x1a\xce\xc4\xc1\x7d\x2e\xd1\x37\x99\x6e\x89\xb4\x70\x33\xbd\xbb\xc7\x7c\x08\xae\xab\xf4\xad\x63\x7f\x15\x74\xfd\xe4\x02\xd7\x49\xb8\x5f\x61\x67\xba\xe6\xb8\x58\xad\xd5\x87\x68\x3f\x1f\x57\x75\x53\x21\xdf\x03\x30\x1f\x84\xcf\xe1\xbf\x02\x00\x00\xff\xff\xf7\x26\x2d\x5c\x76\x12\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo"].(os.FileInfo),
	}
	fs["/demo"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket"].(os.FileInfo),
	}
	fs["/demo/blob.bucket"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/demo/blob.bucket/demo_blob_bucket.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
